{"type": "script", "id": "w2v_job", "maxRows": 1, "script": "import sys.process._ \n import com.lucidworks.searchhub.analytics.AnalyzerUtils._ \n  import com.lucidworks.searchhub.analytics._ \n import org.apache.spark.sql.SQLContext \n  import java.io._ \n import com.lucidworks.apollo.pipeline.index.stages.searchhub.w2v.PrepareFileModified \n val opts = Map(\"zkhost\" -> \"localhost:9983\", \"collection\" -> \"lucidfind\", \"query\" -> \"*:*\",\"fields\" -> \"id,body,title,subject,publishedOnDate,project,content\") \n val mailDF = sqlContext.read.format(\"solr\").options(opts).load \n mailDF.cache() \n mailDF.count() \n val textColumnName = \"body\" \n val tokenizer = analyzerFn(noHTMLstdAnalyzerSchema) \n val vectorizer = TfIdfVectorizer.build(mailDF, tokenizer, textColumnName) \n val vectorizedMail = TfIdfVectorizer.vectorize(mailDF, vectorizer, textColumnName) \n vectorizedMail.cache() \n val filedir=new File(\"modelId\") \n if(filedir.exists)\"rm -rf modelId\"! \n filedir.mkdir() \n val idfMapData=new File(filedir,\"idfMapData\") \n sc.parallelize(vectorizer.idfs.toSeq).saveAsTextFile(\"modelId/idfMapData\") \n val w2vModel = ManyNewsgroups.buildWord2VecModel(vectorizedMail, tokenizer, textColumnName) \n val w2vModelFile=new File(\"modelId/w2vModelData\") \n w2vModel.save(sc, \"modelId/w2vModelData\") \n PrepareFileModified.createZipAndSendFile"}